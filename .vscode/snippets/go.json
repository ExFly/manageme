{
  "Database Model Operation": {
    "prefix": "model",
    "body": [
      "func Find$1(ctx context.Context, query interface{}, opts ...findopt.Find) (ret []model.$1, err error) {",
      "       cur, err := $1Collection.Find(ctx, query, opts...)",
      "       if err != nil {",
      "               return",
      "       }",
      "       defer cur.Close(ctx)",
      "       for cur.Next(ctx) {",
      "               var _$1 model.$1",
      "               err = cur.Decode(&_$1)",
      "               if err != nil {",
      "                       return",
      "               }",
      "               ret = append(ret, _$1)",
      "       }",
      "       return",
      "}",
      "func FindOne$1(ctx context.Context, query interface{}, opts ...findopt.One) (ret *model.$1, err error) {",
      "       cur := $1Collection.FindOne(ctx, query)",
      "       err = cur.Decode(&ret)",
      "       var rett model.$1",
	    "       err = cur.Decode(&rett)",
	    "       ret = &rett",
      "       return",
      "}",
      "func FindOne$1ById(ctx context.Context, id interface{}) (ret *model.$1, err error) {",
      "       return FindOne$1(ctx, utils.M{\"_id\": id})",
      "}"
    ]
  },
  "dataloader": {
    "prefix": "loader.",
    "body": [
      "       loader.$1 = &$1Loader{",
      "               wait:     wait,",
      "               maxBatch: maxBatch,",
      "               fetch: func(keys []string) (ret []*model.$1, errs []error) {",
      "                       cur, err := db.$1Collection.Find(context.Background(), util.M{\"_id\": util.M{\"$$in\": keys}})",
      "                       if err != nil {",
      "                               return nil, dupError(err, len(keys))",
      "                       }",
      "                       defer cur.Close(context.Background())",
      "                       for cur.Next(context.Background()) {",
      "                               var $1_ *model.$1",
      "                               err := cur.Decode(&$1_)",
      "                               ret = append(ret, $1_)",
      "                               errs = append(errs, err)",
      "                       }",
      "                       return",
      "               },",
      "       }"
    ]
  }
}

