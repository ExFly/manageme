directive @logined() on FIELD | FIELD_DEFINITION
directive @can(permission: Permission!, meta:Map) on FIELD | FIELD_DEFINITION

type Query {
  me: User @logined
  moods:[Mood!] @logined
  # debug method
  User(id: ID!): User @can(permission: DEBUG)
  Users():[User!] @can(permission: DEBUG)
}

type Mutation{
  CreateUser(user:UserInput!): User @can(permission: DEBUG)
  CreateMood(mood:MoodInput!): Mood @logined
  UpdateMood(moodId:String!, score:Int, Comment:String): Mood! @logined
  DeleteMood(id:String!): Boolean! @logined
}

# User 用户
type User {
  id: ID!
  sex: Sex!
  username: String!
  password: String!
  moods: [Mood!]
}

#  Mood 心情
type Mood {
  id: ID!
  user: User!
  score: Int!
  comment: String
  time: Time!
}

enum Sex {
  MALE
  FEMALE
  UNKNOWN
}

enum Permission {
  DEBUG # Don't save it to the database
}

# 日期
scalar Time
scalar Map

input UserInput {
  sex: Sex!
  username: String!
  password: String!
}

input MoodInput {
  score: Int!
  comment: String
}
